
################################################################################
 _  __          _     _           _     
| |/ /___ _   _| |__ (_)_ __   __| |___ 
| ' // _ \ | | | '_ \| | '_ \ / _` / __|
| . \  __/ |_| | |_) | | | | | (_| \__ \
|_|\_\___|\__, |_.__/|_|_| |_|\__,_|___/
          |___/                         
################################################################################
 
# https://wiki.hyprland.org/Configuring/Keywords/
# https://wiki.hyprland.org/Configuring/Binds/
# https://wiki.hyprland.org/Configuring/Dispatchers/

# Configurable Variables

$volumeInterval = 5
$brightnessInterval = 5
$windowResizeInterval = 20

$mainMod = SUPER # Changing this requires changing how the launcher is bound.
$moveMod = SHIFT
$sizeMod = ALT
$moniMod = CTRL

################################################################################

 /\ ._ ._  _ 
/--\|_)|_)_> 
    |  |     
################################################################################

# Application Shortcuts

#bind = $mainMod, Return, exec, alacritty -e tmux
bind = $mainMod, Return, exec, alacritty
bind = $mainMod, E, exec, dolphin
bind = $mainMod, I, exec, [workspace 10] alacritty -e vim -p ~/.config/hypr/*

# Application Launcher and Menu

$kill = killall fuzzel
$launcher = $kill || fuzzel
$emoji = $kill; BEMOJI_PICKER_CMD="fuzzel -d" bemoji -t
$clipboard = $kill; cliphist list | fuzzel -d | cliphist decode | wl-copy
$power = $kill; ~/.config/fuzzel/fuzzel-power-menu

bindr = $mainMod, Super_L, exec, $launcher # Launch on release (bindr)
bindr = $mainMod, Super_R, exec, $launcher # Bound to both left & right Super
bind  = $mainMod, 60,   exec, $emoji # $mainMod + .
bind  = $mainMod, V,    exec, $clipboard
bind  = , XF86PowerOff, exec, $power

# Notifications

bind = $mainMod, N, exec, swaync-client -t

################################################################################
 __                
(_    __|_ _ ._ _  
__)\/_> |_(/_| | | 
   /               
################################################################################

# Audio

## Toggle playing
bind = , XF86AudioPlay, execr, playerctl play-pause
bind = $mainMod, F10,   execr, playerctl play-pause
## Skip next/prev
bind = , XF86AudioNext,  execr, playerctl next
bind = $mainMod, F12,    execr, playerctl next
bind = , XF86AudioPrev,  execr, playerctl previous
bind = $mainMod, F9,     execr, playerctl previous

# Screenshot

## Emulate Windows area screenshotting.
bind = $mainMod Shift, S, execr, grimblast --freeze copy area
## Screenshot the entire screen.
bind =         , 107,     execr, grimblast copy screen # Prt Sc
## Screenshot the current window.
bind = $mainMod, 107,     execr, grimbast copy active  # mainMod + Prt Sc

# Volume

## Raising the volume uses a script to prevent going over 100%
$raiseVolume = if [ $(($(wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{gsub(/0?\./,"",$2);print $2}') + $volumeInterval)) -gt 100 ]; then wpctl set-volume @DEFAULT_AUDIO_SINK@ 1; else wpctl set-volume @DEFAULT_AUDIO_SINK@ $volumeInterval%+; fi
$lowerVolume = wpctl set-volume @DEFAULT_AUDIO_SINK@ $volumeInterval%-
$muteVolume  = wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
## l binds during lock, e repeats on hold
bindle = , XF86AudioRaiseVolume, execr, $raiseVolume
bindle = $mainMod, F8, execr, $raiseVolume
bindle = , XF86AudioLowerVolume, execr, $lowerVolume
bindle = $mainMod, F7, execr, $lowerVolume
bindl  = , XF86AudioMute,        execr, $muteVolume
bindl  = $mainMod, F6,        execr, $muteVolume

# Brightness

$raiseBrightness = brightnessctl -c backlight set $brightnessInterval%+
$lowerBrightness = brightnessctl -c backlight set $brightnessInterval%-
bindle = , XF86MonBrightnessUp,   execr, $raiseBrightness
bindle = $mainMod, F2,            execr, $raiseBrightness
bindle = , XF86MonBrightnessDown, execr, $lowerBrightness
bindle = $mainMod, F3,            execr, $lowerBrightness

################################################################################
                       
\    /o._  _| _      _ 
 \/\/ || |(_|(_)\/\/_> 

################################################################################
                       
# Window Manipulation

bind = $mainMod, Q, killactive, 
bind = $mainMod, F, togglefloating,

bind = $mainMod, Z, fullscreen, 1
bind = $mainMod, F11, fullscreen, 0

# These require better bindings.
# bind = Ctrl Alt, Del, exit, 
# bind = $mainMod, 49, pin, # Only works with floating windows; 49 is the backtick.

# Master Layout

## Rotate Layout
bind = $mainMod $moveMod, R, layoutmsg, orientationcycle left top
## Reset Master Split
bind = $mainMod $sizeMod, 61, splitratio, exact 0.50 # mainMod + sizeMod + /

# Dwindle Layout

## Rotate Split
bind = $mainMod $moveMod, R, togglesplit
## Enable Pseudotile (window retains default size)
bind = $mainMod $sizeMod, P, pseudo

# Move Focus

##  mainMod + direction
bind = $mainMod, left,  movefocus, l
bind = $mainMod, down,  movefocus, d
bind = $mainMod, up,    movefocus, u
bind = $mainMod, right, movefocus, r
bind = $mainMod, H, movefocus, l
bind = $mainMod, J, movefocus, d
bind = $mainMod, K, movefocus, u
bind = $mainMod, L, movefocus, r

# Focus urgent or last window
# bind = ALT, TAB, focusurgentorlast

# Move Windows

## mainMod + moveMod + direction
bind = $mainMod $moveMod, left,  movewindow, l
bind = $mainMod $moveMod, down,  movewindow, d
bind = $mainMod $moveMod, up,    movewindow, u
bind = $mainMod $moveMod, right, movewindow, r
bind = $mainMod $moveMod, H, movewindow, l
bind = $mainMod $moveMod, J, movewindow, d
bind = $mainMod $moveMod, K, movewindow, u
bind = $mainMod $moveMod, L, movewindow, r
## mainMod + LMB
bindm = $mainMod, mouse:272, movewindow

# Resize Windows

## Rebind variable to make name shorter.
$wRI = $windowResizeInterval
## mainMod + sizeMod + direction
binde = $mainMod $sizeMod, left,  execr, hyprctl dispatch resizeactive -$wRI 0
binde = $mainMod $sizeMod, down,  execr, hyprctl dispatch resizeactive 0  $wRI
binde = $mainMod $sizeMod, up,    execr, hyprctl dispatch resizeactive 0 -$wRI
binde = $mainMod $sizeMod, right, execr, hyprctl dispatch resizeactive $wRI  0
binde = $mainMod $sizeMod, H, execr, hyprctl dispatch resizeactive -$wRI  0
binde = $mainMod $sizeMod, J, execr, hyprctl dispatch resizeactive 0   $wRI
binde = $mainMod $sizeMod, K, execr, hyprctl dispatch resizeactive 0  -$wRI
binde = $mainMod $sizeMod, L, execr, hyprctl dispatch resizeactive $wRI   0
## mainMod + RMB
bindm = $mainMod, mouse:273, resizewindow

################################################################################
                            
\    /_ ._|  _._  _. _ _  _ 
 \/\/(_)| |<_>|_)(_|(_(/__> 
              |             
################################################################################

# Max number of workspaces per monitor
## Modifying this variable will require modifying workspace switching keybinds.
## This value is not at the top due to the involvement of changing it.
$maxWrkspcs = 10

# Workspace switching scripts
## activeMonitorID
$activeMoni = "$(hyprctl -j monitors | jq -r '.[] | select(.focused == true) | .id')"
## activeWorkspaceID
$activeWkspc = "$(hyprctl -j activeworkspace | jq -r '.id')"

# Switch Workspaces (on Current Monitor)
## - This operates by taking the current active monitor ID
##   and prepending it to the workspace ID.
## - e.g. third workspace on second monitor has ID 13.
## hyprctl dispatch workspace $(($activeMoni*$maxWrkspcs+<number>))
$dispatcher = hyprctl dispatch workspace $(($activeMoni*$maxWrkspcs+
## mainMod + [0-9]
bind = $mainMod, 1, execr, $dispatcher1))
bind = $mainMod, 2, execr, $dispatcher2))
bind = $mainMod, 3, execr, $dispatcher3))
bind = $mainMod, 4, execr, $dispatcher4))
bind = $mainMod, 5, execr, $dispatcher5))
bind = $mainMod, 6, execr, $dispatcher6))
bind = $mainMod, 7, execr, $dispatcher7))
bind = $mainMod, 8, execr, $dispatcher8))
bind = $mainMod, 9, execr, $dispatcher9))
bind = $mainMod, 0, execr, $dispatcher10))

# Cycle Workspaces (on Current Monitor)
## This tomfoolery is an inline script to loop workspaces at a set max.
$nextWorkspace = if [ $activeWkspc -eq $(($activeMoni*$maxWrkspcs+$maxWrkspcs)) ]; then hyprctl dispatch workspace $(($activeMoni*$maxWrkspcs+1)); else hyprctl dispatch workspace r+1; fi
$prevWorkspace = if [ $activeWkspc -eq $(($activeMoni*$maxWrkspcs+1)) ]; then hyprctl dispatch workspace $(($activeMoni*$maxWrkspcs+$maxWrkspcs)); else hyprctl dispatch workspace r-1; fi
## mainMod + (shift +) tab
bind = $mainMod,       tab, execr, $nextWorkspace
bind = $mainMod SHIFT, tab, execr, $prevWorkspace
## mainMod + scroll
bind = $mainMod, mouse_up,   workspace, r+1
bind = $mainMod, mouse_down, workspace, r-1

# Move Window to Workspace
## hyprctl dispatch movetoworkspacesilent $(($activeMoni*$maxWrkspcs+<number>))
$dispatcher = hyprctl dispatch movetoworkspacesilent $(($activeMoni*$maxWrkspcs+
## mainMod + moveMod + [0-9]
bind = $mainMod $moveMod, 1, execr, $dispatcher1))
bind = $mainMod $moveMod, 2, execr, $dispatcher2))
bind = $mainMod $moveMod, 3, execr, $dispatcher3))
bind = $mainMod $moveMod, 4, execr, $dispatcher4))
bind = $mainMod $moveMod, 5, execr, $dispatcher5))
bind = $mainMod $moveMod, 6, execr, $dispatcher6))
bind = $mainMod $moveMod, 7, execr, $dispatcher7))
bind = $mainMod $moveMod, 8, execr, $dispatcher8))
bind = $mainMod $moveMod, 9, execr, $dispatcher9))
bind = $mainMod $moveMod, 0, execr, $dispatcher10))

# Special Workspace (Scratchpad)
bind = $mainMod,          49, togglespecialworkspace   # mainMod + `
bind = $mainMod $moveMod, 49, movetoworkspace, special # mainMod + moveMod + `

# TODO: Write script to toggle window between current and special workspace.

################################################################################
                     
|\/| _ ._ o_|_ _ .__ 
|  |(_)| || |_(_)|_> 

################################################################################

# Switch Monitors
## mainMod + moniMod + direction
bind = $mainMod $moniMod, left,  focusmonitor, l
bind = $mainMod $moniMod, down,  focusmonitor, d
bind = $mainMod $moniMod, up,    focusmonitor, u
bind = $mainMod $moniMod, right, focusmonitor, r
bind = $mainMod $moniMod, H, focusmonitor, l
bind = $mainMod $moniMod, J, focusmonitor, d
bind = $mainMod $moniMod, K, focusmonitor, u
bind = $mainMod $moniMod, L, focusmonitor, r

# Move Window to Monitor
## mainMod + moveMod + moniMod + direction
bind = $mainMod $moveMod $moniMod, left,  movewindow, mon:l
bind = $mainMod $moveMod $moniMod, down,  movewindow, mon:d
bind = $mainMod $moveMod $moniMod, up,    movewindow, mon:u
bind = $mainMod $moveMod $moniMod, right, movewindow, mon:r
bind = $mainMod $moveMod $moniMod, H, movewindow, mon:l
bind = $mainMod $moveMod $moniMod, J, movewindow, mon:d
bind = $mainMod $moveMod $moniMod, K, movewindow, mon:u
bind = $mainMod $moveMod $moniMod, L, movewindow, mon:r

# TODO: Add swap active workspace feature that renames to prevent borking scripts.

################################################################################
 __             
/__.__    ._  _ 
\_||(_)|_||_)_> 
          |     
################################################################################

# WARNING: EXPERIMENTAL
# bind = $mainMod, G, togglegroup
# bind = ALT, TAB, changegroupactive
