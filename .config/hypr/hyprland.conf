
################################################################################
  ____           _     _ _          __ _ _           
 / ___|___ _ __ | |__ (_| )___     / _(_) | ___  ___ 
| |   / _ \ '_ \| '_ \| |// __|   | |_| | |/ _ \/ __|
| |__|  __/ |_) | | | | | \__ \  _|  _| | |  __/\__ \
 \____\___| .__/|_| |_|_| |___/ (_)_| |_|_|\___||___/
          |_|                                        
################################################################################

$mainMoni = eDP-1

# See https://wiki.hyprland.org/Configuring/Monitors/
monitor=$mainMoni,preferred,auto,1.25
monitor=DP-1,preferred,auto,auto,transform,1 # Rotate this monitor 90 degrees.
monitor=,preferred,auto,auto

# Xwayland scaling
xwayland {
    force_zero_scaling = true
}
# env = QT_SCALE_FACTOR, 1.25
# env = GDK_SCALE, 2

# See https://wiki.hyprland.org/Configuring/Keywords/ for more

# Set up status bar
exec-once = waybar
# Set up notification center
exec-once = swaync
# Set up wallpaper
exec-once = swww init
# Set up screen rotation.
exec-once = iio-sensor-proxy & iio-hyprland
# Set up policy kit
exec-once = /usr/lib/polkit-kde-authentication-agent-1
# Set up clipboard history.
exec-once = wl-paste --type text --watch cliphist store #Stores only text data
exec-once = wl-paste --type image --watch cliphist store #Stores only image data

# Default applications
exec-once = firefox
exec-once = sleep 30s; discord
exec-once = sleep 30s; nextcloud

################################################################################

# Environment variables
# Hyprland
# env = HYPRLAND_LOG_WLR,1 # Enable verbose WLR logging
# env = HYPRLAND_NO_RT,1 # Disable realtime priority
# env = HYPRLAND_NO_SD_NOTIFY,1 # Disable sd_notify calls

# XDG
# env = XDG_CURRENT_DESKTOP,Hyprland
# env = XDG_SESSION_TYPE,wayland # This should already be set.
# env = XDG_SESSION_DESKTOP,Hyprland

# env = SDL_VIDEODRIVER,wayland # SDL2 should use Wayland. Switch to X11 for compatibility e.g. Steam games do not like if this is Wayland.

# Theming
# env = XCURSOR_THEME,
env = XCURSOR_SIZE,24

# Qt
env = QT_AUTO_SCREEN_SCALE_FACTOR,1 # Automatic scaling.
env = QT_QPA_PLATFORM,wayland;xcb # Qt should use Wayland first, then X11.
# env = QT_WAYLAND_DISABLE_WINDOWDECORATION=1
env = QT_QPA_PLATFORMTHEME,qt5ct # Or qt6ct. Select Kvantum, then use Kvantum.

# GTK
env = GDK_BACKEND,wayland,x11 # GTK should use Wayland first, then X11.
env = GTK_THEME,Catppuccin-Macchiato-Standard-Lavender-Dark:dark
env = GTK2_RC_FILES,/usr/share/themes/Catppuccin-Macchiato-Standard-Lavender-Dark/gtk-2.0/gtkrc

################################################################################

source = ~/.config/hypr/macchiato.conf

# Configuration
# See https://wiki.hyprland.org/Configuring/Variables/ for more
general {
    gaps_in = 5
    gaps_out = 10
    border_size = 2
    col.active_border = $lavender
    col.inactive_border = $base

    layout = master

    # Please see https://wiki.hyprland.org/Configuring/Tearing/ before you turn this on
    allow_tearing = false
}

decoration {
    rounding = 18
    
    blur {
        enabled = false # Battery saving
        size = 3
        passes = 1
        # Increase the brightness a little to account for 70% opacity
        brightness = 1.0 

        popups = true
        popups_ignorealpha = 0.4
        # ignore_opacity = true
    }

    drop_shadow = false # Battery saving
    shadow_range = 4
    shadow_render_power = 3
    col.shadow = 
}

animations {
    enabled = true

    # See https://wiki.hyprland.org/Configuring/Animations/ for more

    # bezier = myBezier, 0.05, 0.9, 0.1, 1.05

    # animation = windows, 1, 7, myBezier
    animation = windows, 1, 7, default, slide
    # animation = windowsOut, 1, 7, default, popin 80%
    animation = border, 1, 10, default
    animation = borderangle, 1, 8, default
    animation = fade, 1, 3, default
    animation = workspaces, 1, 6, default
    animation = specialWorkspace, 1, 6, default, slidevert
}

dwindle {
    # See https://wiki.hyprland.org/Configuring/Dwindle-Layout/ for more
    pseudotile = yes # Allow pseudotiling by keybind.
    force_split = 2 # Force split to be on the right/bottom.
    preserve_split = yes
}

master {
    # See https://wiki.hyprland.org/Configuring/Master-Layout/ for more
    new_is_master = false
    mfact = 0.50
}

misc {
    force_default_wallpaper = -1 # 0 to disable the anime wallpapers
    disable_autoreload = false
    focus_on_activate = false
    # no_direct_scanout = true
    hide_cursor_on_touch = false # Drawing tablets lose cursor otherwise.
    new_window_takes_over_fullscreen = 2 # Unfullscreen a fullscreen window when
                                         # a new window appears
}

input {
    kb_layout = us
    kb_variant =
    kb_model =
    kb_options =
    kb_rules =

    follow_mouse = 1

    accel_profile = flat

    touchpad {
        natural_scroll = yes
    }

    sensitivity = 0 # -1.0 - 1.0, 0 means no modification.
}

gestures {
    workspace_swipe = on
}

# Per-device config
# See https://wiki.hyprland.org/Configuring/Keywords/#executing for more
device:znt0001:00-14e5:650e-touchpad {
    accel_profile = # Allows default acceleration that is disabled by default.
}

################################################################################

# Window and Workspace Rules

# See https://wiki.hyprland.org/Configuring/Window-Rules/ for more
# windowrule = float, ^(kitty)$
# windowrulev2 = float,class:^(kitty)$,title:^(kitty)$
windowrulev2 = nomaximizerequest, class:.* # You'll probably like this.

# windowrulev2 = size 50% 50%, floating:1 # This breaks a lot of things lol.

#windowrulev2 = float, class:com.nextcloud.desktopclient.nextcloud
#windowrulev2 = center, class:com.nextcloud.desktopclient.nextcloud

windowrulev2 = workspace:special, class:^(discord)$

layerrule = blur, waybar
layerrule = ignorealpha 0, waybar # Avoid blurring invisible parts of Waybar.

layerrule = blur, launcher # Fuzzel

# Force default workspaces onto default monitor to avoid weird workspace issues
# when monitors are hotplugged.
workspace=1,monitor:$mainMoni,default:true
workspace=2,monitor:$mainMoni
workspace=3,monitor:$mainMoni
workspace=4,monitor:$mainMoni
workspace=5,monitor:$mainMoni
workspace=6,monitor:$mainMoni
workspace=7,monitor:$mainMoni
workspace=8,monitor:$mainMoni
workspace=9,monitor:$mainMoni
workspace=10,monitor:$mainMoni

################################################################################

# See https://wiki.hyprland.org/Configuring/Keywords/ for more
$mainMod = SUPER
$moveMod = SHIFT
$sizeMod = ALT
$moniMod = CTRL

# Application Binds
bind = $mainMod, Return, exec, alacritty
bind = $mainMod, E, exec, dolphin

# Rofi and Rice Binds
# bindr = $mainMod, Super_L, exec, killall rofi || rofi -no-lazy-grab -show drun -show-icons
# bind = $mainMod, 60, exec, killall rofi || rofi -show emoji -emoji-mode copy # Super + period # rofi-emoji isn't great... rofimoji is a little better
# bind = $mainMod, 59, exec, rofi -show calc -modi calc -no-show-match -no-sort -automatic-save-to-history # Super + , # rofi-calc kinda sucks
# bind = $mainMod, 60, exec, rofimoji -a type copy # Super + .
# Clipboard history via cliphist and rofi
# The first method just shows text, the second uses a script to also show images!
# bind = SUPER, V, exec, cliphist list | rofi -dmenu | cliphist decode | wl-copy
# bind = $mainMod, V, exec, killall rofi; rofi -modi clipboard:~/.config/rofi/rofi-cliphist-img -show clipboard -show-icons
# bind = , XF86PowerOff, exec, killall rofi; ~/.config/rofi/rofi-power-menu

# Fuzzel
bindr = $mainMod, Super_L, exec, killall fuzzel || fuzzel
bind = $mainMod, 60, exec, killall fuzzel; BEMOJI_PICKER_CMD="fuzzel -d" bemoji -t # Super + .
bind = $mainMod, V, exec, killall fuzzel; cliphist list | fuzzel -d | cliphist decode | wl-copy
bind = , XF86PowerOff, exec, killall fuzzel; ~/.config/fuzzel/fuzzel-power-menu

# Notifications
bind = $mainMod, N, exec, swaync-client -t

# Screenshot
bind = $mainMod $moveMod, S, exec, grimblast --freeze copy area
bind = , 107, exec, grimblast copy screen # Prt Sc
bind = $mainMod, 107, exec, grimbast copy active # Super + Prt Sc

# l is for binding when locked
# e is for repeat when held
bindl = ,XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
$volumeInterval = 5
# Raising the volume uses a script to prevent going over 100%
bindle=, XF86AudioRaiseVolume, exec, if [ $(($(wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{gsub(/0?\./,"",$2);print $2}') + $volumeInterval)) -gt 100 ]; then wpctl set-volume @DEFAULT_AUDIO_SINK@ 1; else wpctl set-volume @DEFAULT_AUDIO_SINK@ $volumeInterval%+; fi
bindle=, XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ $volumeInterval%-
bindle=, XF86MonBrightnessUp, exec, brightnessctl -c backlight set 5%+
bindle=, XF86MonBrightnessDown, exec, brightnessctl -c backlight set 5%-

# Window Manipulation Binds
bind = $mainMod, Q, killactive, 
bind = $mainMod, M, exit, 
bind = $mainMod, F, togglefloating,
bind = $mainMod, F, centerwindow,
bind = $mainMod, 49, pin, # Only works with floating windows; 49 is the backtick.
bind = $mainMod, Z, fullscreen, 1
bind = $mainMod, F11, fullscreen, 0

# Move focus with mainMod + arrow keys
bind = $mainMod, left,  movefocus, l
bind = $mainMod, down,  movefocus, d
bind = $mainMod, up,    movefocus, u
bind = $mainMod, right, movefocus, r
bind = $mainMod, H, movefocus, l
bind = $mainMod, J, movefocus, d
bind = $mainMod, K, movefocus, u
bind = $mainMod, L, movefocus, r

# Focus urgent or last window
bind = ALT, TAB, focusurgentorlast

# Moving windows with mainMod + shift + arrows
bind = $mainMod $moveMod, left,  movewindow, l
bind = $mainMod $moveMod, down,  movewindow, d
bind = $mainMod $moveMod, up,    movewindow, u
bind = $mainMod $moveMod, right, movewindow, r
bind = $mainMod $moveMod, H, movewindow, l
bind = $mainMod $moveMod, J, movewindow, d
bind = $mainMod $moveMod, K, movewindow, u
bind = $mainMod $moveMod, L, movewindow, r
# Master layout rotation
bind = $mainMod $moveMod, R, layoutmsg, orientationcycle left top
# Dwindle layout
bind = $mainMod $moveMod, R, togglesplit
bind = $mainMod $moveMod, P, pseudo

# Resize windows with mainMod + alt + arrows
binde = $mainMod $sizeMod, left,  resizeactive, -20 0
binde = $mainMod $sizeMod, down,  resizeactive, 0 20
binde = $mainMod $sizeMod, up,    resizeactive, 0 -20
binde = $mainMod $sizeMod, right, resizeactive, 20 0
binde = $mainMod $sizeMod, H, resizeactive, -20 0
binde = $mainMod $sizeMod, J, resizeactive, 0 20
binde = $mainMod $sizeMod, K, resizeactive, 0 -20
binde = $mainMod $sizeMod, L, resizeactive, 20 0
bind = $mainMod $sizeMod, 61, splitratio, exact 0.50 #/

# Workspace Management

# Max number of workspaces per monitor
# - Modifying this variable will require modifying workspace switching keybinds.
$maxWorkspaces = 10

# Switch workspaces (on current monitor) with mainMod + [0-9]
# - This operates by taking the current active monitor ID and prepending it to the workspace ID.
# - e.g. third workspace on second monitor has ID 13.
$activeMonitorID = "$(hyprctl -j monitors | jq -r '.[] | select(.focused == true) | .id')"
$activeWorkspaceID = "$(hyprctl -j activeworkspace | jq -r '.id')"

# Method 2 (works fine, but isn't clean)
# bind = $mainMod, 1, execr, hyprctl dispatch workspace "$activeMonitorID"1
# Method 2.5
bind = $mainMod, 1, execr, hyprctl dispatch workspace $(($activeMonitorID*$maxWorkspaces+1))
bind = $mainMod, 2, execr, hyprctl dispatch workspace $(($activeMonitorID*$maxWorkspaces+2))
bind = $mainMod, 3, execr, hyprctl dispatch workspace $(($activeMonitorID*$maxWorkspaces+3))
bind = $mainMod, 4, execr, hyprctl dispatch workspace $(($activeMonitorID*$maxWorkspaces+4))
bind = $mainMod, 5, execr, hyprctl dispatch workspace $(($activeMonitorID*$maxWorkspaces+5))
bind = $mainMod, 6, execr, hyprctl dispatch workspace $(($activeMonitorID*$maxWorkspaces+6))
bind = $mainMod, 7, execr, hyprctl dispatch workspace $(($activeMonitorID*$maxWorkspaces+7))
bind = $mainMod, 8, execr, hyprctl dispatch workspace $(($activeMonitorID*$maxWorkspaces+8))
bind = $mainMod, 9, execr, hyprctl dispatch workspace $(($activeMonitorID*$maxWorkspaces+9))
bind = $mainMod, 0, execr, hyprctl dispatch workspace $(($activeMonitorID*$maxWorkspaces+10))

# Method 3
# bind = $mainMod, 1, execr, $workspaceSwitcher 1 $maxWorkspaces
# bind = $mainMod, 2, execr, $workspaceSwitcher 2 $maxWorkspaces
# ...
# bind = $mainMod, 0, execr, $workspaceSwitcher 10 $maxWorkspaces

# Switch workspaces with mainMod + (shift +) tab
# bind = $mainMod, tab, workspace, r+1
# bind = $mainMod $moveMod, tab, workspace, r-1
# This tomfoolery is an inline script to loop workspaces at a set max.
$nextWorkspace = if [ $activeWorkspaceID -eq $(($activeMonitorID*$maxWorkspaces+$maxWorkspaces)) ]; then hyprctl dispatch workspace $(($activeMonitorID*$maxWorkspaces+1)); else hyprctl dispatch workspace r+1; fi
$prevWorkspace = if [ $activeWorkspaceID -eq $(($activeMonitorID*$maxWorkspaces+1)) ]; then hyprctl dispatch workspace $(($activeMonitorID*$maxWorkspaces+$maxWorkspaces)); else hyprctl dispatch workspace r-1; fi
bind = $mainMod, tab, execr, $nextWorkspace
bind = $mainMod SHIFT, tab, execr, $prevWorkspace

# Switch monitors with mainMod + moniMod + direction
bind = $mainMod $moniMod, left,  focusmonitor, l
bind = $mainMod $moniMod, down,  focusmonitor, d
bind = $mainMod $moniMod, up,    focusmonitor, u
bind = $mainMod $moniMod, right, focusmonitor, r
bind = $mainMod $moniMod, H, focusmonitor, l
bind = $mainMod $moniMod, J, focusmonitor, d
bind = $mainMod $moniMod, K, focusmonitor, u
bind = $mainMod $moniMod, L, focusmonitor, r

# Scroll through existing workspaces with mainMod + scroll
bind = $mainMod, mouse_down, workspace, e+1
bind = $mainMod, mouse_up, workspace, e-1

# Move active window to a workspace with mainMod + $moveMod + [0-9]
# bind = $mainMod $moveMod, 1, movetoworkspace, 1
bind = $mainMod $moveMod, 1, execr, hyprctl dispatch movetoworkspacesilent $(($activeMonitorID*$maxWorkspaces+1))
bind = $mainMod $moveMod, 2, execr, hyprctl dispatch movetoworkspacesilent $(($activeMonitorID*$maxWorkspaces+2))
bind = $mainMod $moveMod, 3, execr, hyprctl dispatch movetoworkspacesilent $(($activeMonitorID*$maxWorkspaces+3))
bind = $mainMod $moveMod, 4, execr, hyprctl dispatch movetoworkspacesilent $(($activeMonitorID*$maxWorkspaces+4))
bind = $mainMod $moveMod, 5, execr, hyprctl dispatch movetoworkspacesilent $(($activeMonitorID*$maxWorkspaces+5))
bind = $mainMod $moveMod, 6, execr, hyprctl dispatch movetoworkspacesilent $(($activeMonitorID*$maxWorkspaces+6))
bind = $mainMod $moveMod, 7, execr, hyprctl dispatch movetoworkspacesilent $(($activeMonitorID*$maxWorkspaces+7))
bind = $mainMod $moveMod, 8, execr, hyprctl dispatch movetoworkspacesilent $(($activeMonitorID*$maxWorkspaces+8))
bind = $mainMod $moveMod, 9, execr, hyprctl dispatch movetoworkspacesilent $(($activeMonitorID*$maxWorkspaces+9))
bind = $mainMod $moveMod, 0, execr, hyprctl dispatch movetoworkspacesilent $(($activeMonitorID*$maxWorkspaces+10))

# Special workspace (scratchpad)
bind = $mainMod, 49, togglespecialworkspace
bind = $mainMod $moveMod, 49, movetoworkspace, special

# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow
